import pygame
import random
import Regions
import Generator

'''
    [(15, 0), 
     (14, 1), (15, 1), 
     (13, 2), (14, 2), (15, 2), 
     (13, 3), (14, 3), (15, 3), 
     (12, 4), (13, 4), (14, 4), (15, 4), 
     (12, 5), (13, 5), (14, 5), (15, 5), 
     (12, 6), (13, 6), (14, 6), (15, 6), 
     (12, 7), (13, 7), (14, 7), (15, 7), 
     (12, 8), (13, 8), (14, 8), (15, 8), 
     (12, 9), (13, 9), (14, 9), (15, 9), 
     (12, 10), (13, 10), (14, 10), (15, 10), 
     (12, 11), (13, 11), (14, 11), (15, 11), 
     (12, 12), (13, 12), (14, 12), (15, 12), 
     (13, 13), (14, 13), (15, 13), 
     (14, 14), (15, 14), 
     (15, 15), 
     
     (15, 17), 
     (14, 18), (15, 18), 
     (13, 19), (14, 19), (15, 19), 
     (12, 20), (13, 20), (14, 20), (15, 20), 
     (12, 21), (13, 21), (14, 21), (15, 21), 
     (12, 22), (13, 22), (14, 22), (15, 22), 
     (12, 23), (13, 23), (14, 23), (15, 23), 
     (12, 24), (13, 24), (14, 24), (15, 24), 
     (12, 25), (13, 25), (14, 25), (15, 25), 
     (12, 26), (13, 26), (14, 26), (15, 26), 
     (12, 27), (13, 27), (14, 27), (15, 27), 
     (12, 28), (13, 28), (14, 28), (15, 28), 
     (13, 29), (14, 29), (15, 29), 
     (13, 30), (14, 30), (15, 30), 
     (14, 31), (15, 31), 
     (15, 32)]
     
     [
     (4, 13), (5, 13), (6, 13), (7, 13), (8, 13), (9, 13), (10, 13), 
     (2, 14), (3, 14), (4, 14), (5, 14), (6, 14), (7, 14), (8, 14), (9, 14), (10, 14), (11, 14), (12, 14), 
     (1, 15), (2, 15), (3, 15), (4, 15), (5, 15), (6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15),
     (0, 16), (1, 16), (2, 16), (3, 16), (4, 16), (5, 16), (6, 16), (7, 16), (8, 16), (9, 16), (10, 16), (11, 16), (12, 16), (13, 16), (14, 16), (15, 16), 
     (1, 17), (2, 17), (3, 17), (4, 17), (5, 17), (6, 17), (7, 17), (8, 17), (9, 17), (10, 17), (11, 17), (12, 17), (13, 17),
     (2, 18), (3, 18), (4, 18), (5, 18), (6, 18), (7, 18), (8, 18), (9, 18), (10, 18), (11, 18), (12, 18), 
     (4, 19), (5, 19), (6, 19), (7, 19), (8, 19), (9, 19), (10, 19), 
     ]
     
     [
     (4, 4),
     (5, 5), (6, 5), (7, 5), 
     (5, 6), (6, 6), (7, 6), (8, 6), (9, 6),
     (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7),
     (6, 8), (7, 8), (8, 8), (9, 8), (10, 8), (11, 8),
     (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9),
     (7, 10), (8, 10), (9, 10), (10, 10), (11, 10), (12, 10),
     (8, 11), (9, 11), (10, 11), (11, 11), (12, 11), 
     (9, 12), (10, 12), (11, 12), (12, 12),
     (11, 13), (12, 13),
     (13, 14),
     (14, 15), 
      
     (14, 17), 
     (13, 18), 
     (11, 19), (12, 19),
     (9, 20), (10, 20), (11, 20), (12, 20), 
     (8, 21), (9, 21), (10, 21), (11, 21), (12, 21), 
     (7, 22), (8, 22), (9, 22), (10, 22), (11, 22), (12, 22), 
     (6, 23), (7, 23), (8, 23), (9, 23), (10, 23), (11, 23), (12, 23), 
     (6, 24), (7, 24), (8, 24), (9, 24), (10, 24), (11, 24), 
     (5, 25), (6, 25), (7, 25), (8, 25), (9, 25), (10, 25), 
     (5, 26), (6, 26), (7, 26), (8, 26), (9, 26),
     (5, 27), (6, 27), (7, 27),
     (4, 28)
     ]

'''


def binary(n, digit_count):
    s = bin(n)

    # removing "0b" prefix
    s1 = s[2:]

    length = len(s1)
    eight_long = 0

    # if we are using more than 8 blocks then we need to change this so that it is the number we ARE using

    if length < digit_count:
        eight_long = ("0" * (digit_count-length)) + s1
        return eight_long
    else:
        return s1


class Flower:
    def __init__(self, petal_one, petal_two, petal_three, col):
        self.p1 = petal_one
        self.p2 = petal_two
        self.p3 = petal_three
        self.c = col
        self.size = 1
        self.p1_temp = [(15, 0),
     (14, 1), (15, 1),
     (13, 2), (14, 2), (15, 2),
     (13, 3), (14, 3), (15, 3),
     (12, 4), (13, 4), (14, 4), (15, 4),
     (12, 5), (13, 5), (14, 5), (15, 5),
     (12, 6), (13, 6), (14, 6), (15, 6),
     (12, 7), (13, 7), (14, 7), (15, 7),
     (12, 8), (13, 8), (14, 8), (15, 8),
     (12, 9), (13, 9), (14, 9), (15, 9),
     (12, 10), (13, 10), (14, 10), (15, 10),
     (12, 11), (13, 11), (14, 11), (15, 11),
     (12, 12), (13, 12), (14, 12), (15, 12),
     (13, 13), (14, 13), (15, 13),
     (14, 14), (15, 14),
     (15, 15),

     (15, 17),
     (14, 18), (15, 18),
     (13, 19), (14, 19), (15, 19),
     (12, 20), (13, 20), (14, 20), (15, 20),
     (12, 21), (13, 21), (14, 21), (15, 21),
     (12, 22), (13, 22), (14, 22), (15, 22),
     (12, 23), (13, 23), (14, 23), (15, 23),
     (12, 24), (13, 24), (14, 24), (15, 24),
     (12, 25), (13, 25), (14, 25), (15, 25),
     (12, 26), (13, 26), (14, 26), (15, 26),
     (12, 27), (13, 27), (14, 27), (15, 27),
     (12, 28), (13, 28), (14, 28), (15, 28),
     (13, 29), (14, 29), (15, 29),
     (13, 30), (14, 30), (15, 30),
     (14, 31), (15, 31),
     (15, 32)]
        self.p2_temp = [
     (4, 13), (5, 13), (6, 13), (7, 13), (8, 13), (9, 13), (10, 13),
     (2, 14), (3, 14), (4, 14), (5, 14), (6, 14), (7, 14), (8, 14), (9, 14), (10, 14), (11, 14), (12, 14),
     (1, 15), (2, 15), (3, 15), (4, 15), (5, 15), (6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15),
     (0, 16), (1, 16), (2, 16), (3, 16), (4, 16), (5, 16), (6, 16), (7, 16), (8, 16), (9, 16), (10, 16), (11, 16), (12, 16), (13, 16), (14, 16), (15, 16),
     (1, 17), (2, 17), (3, 17), (4, 17), (5, 17), (6, 17), (7, 17), (8, 17), (9, 17), (10, 17), (11, 17), (12, 17), (13, 17),
     (2, 18), (3, 18), (4, 18), (5, 18), (6, 18), (7, 18), (8, 18), (9, 18), (10, 18), (11, 18), (12, 18),
     (4, 19), (5, 19), (6, 19), (7, 19), (8, 19), (9, 19), (10, 19),
     ]
        self.p3_temp = [
     (4, 4),
     (5, 5), (6, 5), (7, 5),
     (5, 6), (6, 6), (7, 6), (8, 6), (9, 6),
     (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7),
     (6, 8), (7, 8), (8, 8), (9, 8), (10, 8), (11, 8),
     (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9),
     (7, 10), (8, 10), (9, 10), (10, 10), (11, 10), (12, 10),
     (8, 11), (9, 11), (10, 11), (11, 11), (12, 11),
     (9, 12), (10, 12), (11, 12), (12, 12),
     (11, 13), (12, 13),
     (13, 14),
     (14, 15),

     (14, 17),
     (13, 18),
     (11, 19), (12, 19),
     (9, 20), (10, 20), (11, 20), (12, 20),
     (8, 21), (9, 21), (10, 21), (11, 21), (12, 21),
     (7, 22), (8, 22), (9, 22), (10, 22), (11, 22), (12, 22),
     (6, 23), (7, 23), (8, 23), (9, 23), (10, 23), (11, 23), (12, 23),
     (6, 24), (7, 24), (8, 24), (9, 24), (10, 24), (11, 24),
     (5, 25), (6, 25), (7, 25), (8, 25), (9, 25), (10, 25),
     (5, 26), (6, 26), (7, 26), (8, 26), (9, 26),
     (5, 27), (6, 27), (7, 27),
     (4, 28)
     ]

    def roll(self):
        self.p1 = binary(random.randint(0, 2**102 -1), 102)
        self.p2 = binary(random.randint(0, 2**78 -1), 78)
        self.p3 = binary(random.randint(0, 2**94 -1), 94)
        self.c = Generator.Colour()
        self.size = random.randint(1, 5)
